DOCUMENT();
loadMacros('PGstandard.pl', 'PGML.pl', 'PGcourse.pl');

$f = Compute("sqrt(3x + 1)");
$f1 = $f->eval(x=>"3");
$f2 = $f->substitute(x=>"3");

Context()->variables->add(y => 'Real');
$g = Compute('7xy');
# This next line is an error.
# $g1 = $g->eval(x => '3');
$g2 = $g->substitute(x => '3');
$g3 = $g->eval(x=>3, y=> -1);

Context()->flags->set(reduceConstants=>0);
$f3 = $f->eval(x => 3);
$f4 = $f->substitute(x => 3);

Context()->flags->set(reduceConstantFunctions => 0, reduceConstants => 1);
$f5 = $f->substitute(x => 3);

BEGIN_PGML
This shows the difference between [|eval|] and [|substitute|].  First, we start
with a function [`[$f]`]:

* [|$f->eval(x=>'3')|] returns [$f1] and the type is [@ ref $f1@]
* [|$f->substitute(x=>'3')|] returns [$f2] and the type is [@ ref $f2 @]

Next, we do the same with the function [`[$g]`]

* [|$g->eval(x=>'3')|] throws an error.
* [|$g->substitute(x=>'3')|] returns [$g2] and the type is [@ ref $g2 @]
* [|$g->eval(x=>'3', y => -1)|] returns [$g3] and the type is [@ ref $g3 @]

If [|reduceConstants|] is set to 0 (False) in the flags, we get

* [|$f->eval(x => 3)|] returns [$f3]
* [|$f->substitute(x => 3)|] returns [$f4]

If [|reducedConstants|] is set back to 1 and [|reduceConstantFunctions|] is
set to 0, then

* [|$f->substitute(x => 3)|] returns [$f5]

END_PGML

ENDDOCUMENT();